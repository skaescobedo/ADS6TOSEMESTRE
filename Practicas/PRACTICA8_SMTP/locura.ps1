# Función para instalar y configurar el DNS local
function InstalarDNS {
    param([string] $dominio)

    Write-Host "Instalando y configurando DNS para $dominio..."

    $ip = (Get-NetIPAddress -AddressFamily IPv4 | Where-Object {
        $_.InterfaceAlias -notlike "*Loopback*" -and $_.PrefixOrigin -ne "WellKnown"
    }).IPAddress | Select-Object -First 1

    # Instalar características necesarias
    Install-WindowsFeature -Name DNS -IncludeManagementTools -ErrorAction SilentlyContinue | Out-Null
    Install-WindowsFeature -Name RSAT-DNS-Server -ErrorAction SilentlyContinue | Out-Null

    # Crear zona primaria
    Add-DnsServerPrimaryZone -Name $dominio -ZoneFile "$dominio.dns" -ErrorAction SilentlyContinue

    # Crear registros
    Add-DnsServerResourceRecordA -Name "@" -ZoneName $dominio -IPv4Address $ip -ErrorAction SilentlyContinue
    Add-DnsServerResourceRecordA -Name "mail" -ZoneName $dominio -IPv4Address $ip -ErrorAction SilentlyContinue
    Add-DnsServerResourceRecordMX -Name "@" -ZoneName $dominio -MailExchange "mail.$dominio" -Preference 10 -ErrorAction SilentlyContinue

    Add-DnsServerResourceRecord -Srv -Name "_smtp._tcp" -ZoneName $dominio `
        -DomainName "mail.$dominio" -Priority 0 -Weight 5 -Port 25 -ErrorAction SilentlyContinue

    Add-DnsServerResourceRecord -Srv -Name "_pop3._tcp" -ZoneName $dominio `
        -DomainName "mail.$dominio" -Priority 0 -Weight 5 -Port 110 -ErrorAction SilentlyContinue

    Restart-Service -Name DNS

    Write-Host "DNS configurado correctamente para $dominio.`n"
}

function InstalarVC2012 {
    Write-Host "`nVerificando Visual C++ Redistributable 2012 (VC11)..."

    $vc2012Installed = Get-ChildItem "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall" |
                       Get-ItemProperty |
                       Where-Object { $_.DisplayName -match "Visual C\+\+ 2012 Redistributable" }

    if ($vc2012Installed) {
        Write-Host "Visual C++ 2012 Redistributable ya está instalado."
    } else {
        Write-Host "Falta Visual C++ 2012. Descargando e instalando..."
        $vc2012Url = "https://download.microsoft.com/download/1/6/B/16B06F60-3B20-4FF2-B699-5E9B7962F9AE/VSU_4/vcredist_x64.exe"
        $vc2012Installer = "$env:TEMP\vcredist_x64_2012.exe"
        Invoke-WebRequest -Uri $vc2012Url -OutFile $vc2012Installer
        Start-Process -FilePath $vc2012Installer -ArgumentList "/install /quiet /norestart" -NoNewWindow -Wait
        Write-Host "Visual C++ 2012 Redistributable instalado correctamente."
    }
}

function descargar_archivo_zip {
    $url = "https://drive.usercontent.google.com/download?id=1CnUiT2iaO82O5lJmKJ2qQ3WuAOwKvZG0&export=download&authuser=0&confirm=t&uuid=2b4630c6-37d5-4462-b0c7-d6375e21d417&at=APcmpoxRv2L8WspEM64p3RWg6HN0:1743790563494"
    $ruta_salida = "MERCURY.zip"

    Write-Host "Descargando MERCURY.zip desde Google Drive..."
    Invoke-WebRequest -Uri $url -OutFile $ruta_salida

    if (-Not (Test-Path $ruta_salida)) {
        Write-Host "No se pudo descargar el archivo ZIP." -ForegroundColor Red
        exit
    }
}

function extraer_archivo_zip {
    $ruta_zip = "MERCURY.zip"
    $ruta_destino = "C:\"

    Write-Host "Extrayendo Mercury/32 en $ruta_destino..."
    Expand-Archive -Path $ruta_zip -DestinationPath $ruta_destino -Force
}

function obtener_dominio {
    do {
        $global:dominio = Read-Host "¿Qué dominio quieres usar? (ej. miempresa.com)"
    } while ($global:dominio -notmatch '^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$')

    $global:nombre_corto_dominio = $global:dominio.Split('.')[0]
}

function generar_archivo_ini {
    $iniTemplate = @"
#  MERCURY.INI generated by Mercury Setup
#
#
#  Sample Bindery Mode / Standalone Mode MERCURY.INI file.
#  This sample file implements most of the possible switches for each
#  module, but you can edit it to do less if you wish.
#
#  Anything after a '#' to the end of the line is a comment and
#  is stripped out before parsing. Trailing and leading whitespace
#  is also stripped before parsing. Many sample commands have been
#  left in this file commented out for reference purposes.
#
#  Note that in general, manual modification of this file is NOT
#  RECOMMENDED - use the Mercury "Configuration" menu to change the
#  program's settings wherever possible.
#

[General]
myname:          {{DOMINIO_CANONICO}}    # Canonical name for this server
timezone:        +0000    # Time Zone to add to date fields
file_api:        1    # Use the file api instead of queues
mailqueue:       C:\MERCURY\QUEUE    # Where mail should be put for delivery
smtpqueue:       C:\MERCURY\QUEUE    # Where the SMTP client should look for mail
newmail_path:    C:\MERCURY\MAIL\~N    # Where to find the users' WinPMail mailboxes.

[Protocols]
MERCURYS.DLL
MERCURYP.DLL
# MERCURYE.DLL
# MERCURYC.DLL
# MERCURYD.DLL
# MERCURYH.DLL
# MERCURYF.DLL
# MERCURYW.DLL
# MERCURYX.DLL
MERCURYI.DLL
# MERCURYB.DLL

[Mercury]
failfile:      C:\MERCURY\Mercury\FAILURE.MER
confirmfile:   C:\MERCURY\Mercury\CONFIRM.MER
aliasfile:     C:\MERCURY\Mercury\ALIAS.MER
synfile:       C:\MERCURY\Mercury\SYNONYM.MER
listfile:      C:\MERCURY\Mercury\LISTS.MER
logfile:       C:\MERCURY\Logs\Core\~y-~m-~d.log
logwidth:      30
retpath:       1
maxhops:       30
gullible:      0
poll:          10
scratch:       C:\MERCURY\Scratch
returnlines:   15
postmaster:    Admin
broadcast:     1
receipts:      0
PM_notify:     1
change_owner:  1
auto_tzone:    1
LogLevel:      15
LogMax:        100
RetryPeriod:   30
MaxRetries:    16
TwoPasses:     1
Autoaddress:   0
Daily_exit:    0
No_Areply:     0
Alt_Forward:   0
Maint_hour:    2
Maint_min:     0
Retry_Mode:    0
Local_DSNs:    1
DSN_time1:     10800
DSN_time2:     86400
DSN_time3:     259200
Host_in_title: 0
Lingering:     0
Linger_Timeout: 60
Alert_Host:    notify.pmail.com
Alert_Interval: 720
Alert_Flags:   3
Fast_First_Retry: 0
Fast_First_Retry_Secs: 60

[MercuryC]
logfile : C:\MERCURY\Logs\MercuryC\~y-~m-~d.log
Session_logging : C:\MERCURY\Sessions\MercuryC\
host:
scratch:     C:\MERCURY\scratch
poll:        30
returnlines: 15
failfile:    C:\MERCURY\Mercury\FAILURE.MER
esmtp:       1

[MercuryE]
logfile : C:\MERCURY\Logs\MercuryE\~y-~m-~d.log
Session_logging : C:\MERCURY\Sessions\MercuryE\

[MercuryD]
Session_logging : C:\MERCURY\Sessions\MercuryD\
Scratch : C:\MERCURY\Scratch\MercuryD

[MercuryS]
logfile : C:\MERCURY\Logs\MercuryS\~y-~m-~d.log
Session_logging : C:\MERCURY\Sessions\MercuryS\
debug:       1
timeout : 30
Relay : 0

[MercuryP]
logfile : C:\MERCURY\Logs\MercuryP\~y-~m-~d.log
Session_logging : C:\MERCURY\Sessions\MercuryP\
Scratch : C:\MERCURY\Scratch\MercuryP

[MercuryX]

[Domains]
{{NOMBRE_CORTO_DOMINIO}}: {{NOMBRE_CORTO_DOMINIO}}
{{NOMBRE_CORTO_DOMINIO}}: {{DOMINIO_CANONICO}}

[Maiser]
Helpfile:        C:\MERCURY\Mercury\MAISER.HLP
Lookupfile:      C:\MERCURY\Mercury\MAISER.LKP
Send_dir:        C:\MERCURY\Mercury\SENDABLE
Logfile:         C:\MERCURY\Logs\Maiser\~y-~m-~d.LOG
Notify:          C:\MERCURY\Mercury\TMP
NoList:          N
Local_only:      Y

[MercuryH]
logfile : C:\MERCURY\Logs\MercuryH\~y-~m-~d.log

[MercuryI]
Scratch : C:\MERCURY\Scratch\MercuryI
logfile : C:\MERCURY\Logs\MercuryI\~y-~m-~d.log
Session_logging : C:\MERCURY\Sessions\MercuryI\

[MercuryB]
Scratch : C:\MERCURY\Scratch\MercuryB
logfile : C:\MERCURY\Logs\MercuryB\~y-~m-~d.log
Session_logging : C:\MERCURY\Sessions\MercuryB\

[Groups]

[Rewrite]

[Statistics]
StatFlags:    0
STF_Hours:    24
STM_Hours:    24
"@

    # Reemplazar variables
    $iniFinal = $iniTemplate -replace "{{DOMINIO_CANONICO}}", $global:dominio
    $iniFinal = $iniFinal -replace "{{NOMBRE_CORTO_DOMINIO}}", $global:nombre_corto_dominio

    # Guardar archivo INI con codificación UTF8 sin BOM
    $iniPath = "C:\MERCURY\MERCURY.INI"
    $utf8NoBom = New-Object System.Text.UTF8Encoding($false)
    [System.IO.File]::WriteAllText($iniPath, $iniFinal, $utf8NoBom)

    Write-Host "Mercury/32 instalado correctamente con dominio $global:dominio"
}

function configurar_firewall_mercury {
    Write-Host "Configurando reglas de firewall..."
    New-NetFirewallRule -DisplayName "Mercury SMTP (25)" -Direction Inbound -Protocol TCP -LocalPort 25 -Action Allow -Profile Any
    New-NetFirewallRule -DisplayName "Mercury POP3 (110)" -Direction Inbound -Protocol TCP -LocalPort 110 -Action Allow -Profile Any
    New-NetFirewallRule -DisplayName "Mercury IMAP (143)" -Direction Inbound -Protocol TCP -LocalPort 143 -Action Allow -Profile Any
}

function crear_usuarios_mercury {
    # Rutas
    $mercuryPath = "C:\Mercury"
    $mailDir = "$mercuryPath\Mail"
    $pMailUsrPath = "$mailDir\PMAIL.USR"
    $mercuryExe = "$mercuryPath\Mercury.exe"

    # Preguntar cuántos usuarios
    do {
        $inputCantidad = Read-Host "¿Cuántos usuarios deseas crear?"
    } while (-not ($inputCantidad -as [int]) -or [int]$inputCantidad -lt 1)

    $cantidadUsuarios = [int]$inputCantidad

    # Detener Mercury si está abierto
    Stop-Process -Name "Mercury" -Force -ErrorAction SilentlyContinue
    Start-Sleep -Seconds 3

    for ($i = 1; $i -le $cantidadUsuarios; $i++) {
        Write-Host "`n[$i de $cantidadUsuarios] Crear nuevo usuario:"

        # Validar nombre del buzón
        do {
            $newUser = Read-Host "Nombre del buzón (ej. juan)"
            $nombreInvalido = ($newUser -match '[^a-zA-Z0-9_-]') -or ($newUser -eq "")
            $rutaUsuario = "$mailDir\$newUser"
            $usuarioExiste = (Test-Path $rutaUsuario) -or (Select-String -Path $pMailUsrPath -Pattern "^U;$newUser;" -Quiet)

            if ($nombreInvalido) {
                Write-Host "El nombre no puede estar vacío y solo debe contener letras, números, guiones o guiones bajos." -ForegroundColor Yellow
            } elseif ($usuarioExiste) {
                Write-Host "El usuario '$newUser' ya existe." -ForegroundColor Yellow
            }
        } while ($nombreInvalido -or $usuarioExiste)

        # Descripción libre
        $userDescription = Read-Host "Descripción (nombre completo o alias)"

        # Validar contraseña
        do {
            $password = Read-Host "Contraseña para $newUser"
            $passInvalida = ($password -eq "") -or ($password -match "\s")
            if ($passInvalida) {
                Write-Host "La contraseña no puede estar vacía ni contener espacios." -ForegroundColor Yellow
            }
        } while ($passInvalida)

        # Directorio del usuario
        $userDir = "$mailDir\$newUser"

        # 1. Agregar entrada a PMAIL.USR
        Add-Content -Path $pMailUsrPath -Value "U;$newUser;$userDescription"

        # 2. Crear carpeta del usuario si no existe
        if (-not (Test-Path $userDir)) {
            New-Item -Path $userDir -ItemType Directory | Out-Null
        }

        # 3. Crear PASSWD.PM
        $passwdContent = @"
# Mercury/32 User Information File
POP3_access: $password
APOP_secret: $password
"@
        Set-Content -Path "$userDir\PASSWD.PM" -Value $passwdContent -Encoding ASCII

        # 4. Dar permisos NTFS
        icacls $userDir /grant "$env:USERNAME`:(OI)(CI)F" | Out-Null

        Write-Host "Usuario '$newUser' creado correctamente."
    }

    # Reiniciar Mercury
    Start-Process -FilePath $mercuryExe
    Write-Host "`nMercury reiniciado. Todos los usuarios fueron creados correctamente."
}

# 1. Todas las funciones aquí (descargar_archivo_zip, extraer_archivo_zip, etc.)
# ...

# 2. Lógica condicional de instalación
if (-not (Test-Path "C:\Mercury\MERCURY.INI")) {
    Write-Host "Primera vez: se instalará y configurará Mercury/32."
    
    descargar_archivo_zip
    extraer_archivo_zip
    obtener_dominio
    generar_archivo_ini
    configurar_firewall_mercury
}
else {
    Write-Host "Mercury ya está instalado. Omitiendo descarga y configuración inicial."
}

# 3. Crear usuarios (esto sí se ejecuta siempre que quieras)
crear_usuarios_mercury

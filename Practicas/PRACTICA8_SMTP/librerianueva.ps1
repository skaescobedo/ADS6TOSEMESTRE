# Enlace directo al archivo desde Google Drive
$downloadUrl = "https://drive.usercontent.google.com/download?id=1CnUiT2iaO82O5lJmKJ2qQ3WuAOwKvZG0&export=download&authuser=0&confirm=t&uuid=2b4630c6-37d5-4462-b0c7-d6375e21d417&at=APcmpoxRv2L8WspEM64p3RWg6HN0:1743790563494"
$zipPath = "MERCURY.zip"
$destPath = "C:\"

# Descargar archivo ZIP
Write-Host "Descargando MERCURY.zip desde Google Drive..."
Invoke-WebRequest -Uri $downloadUrl -OutFile $zipPath

if (-Not (Test-Path $zipPath)) {
    Write-Host "No se pudo descargar el archivo ZIP." -ForegroundColor Red
    exit
}

# Extraer el archivo en C:\
Write-Host "Extrayendo Mercury/32 en C:\..."
Expand-Archive -Path $zipPath -DestinationPath $destPath -Force

# Pedir dominio
$dominio = Read-Host "¿Qué dominio quieres usar? (ej. miempresa.com)"
$nombreCorto = $dominio.Split('.')[0]

# Plantilla EXACTA del archivo funcional proporcionado por el usuario
$iniTemplate = @"
#  MERCURY.INI generated by Mercury Setup
#
#
#  Sample Bindery Mode / Standalone Mode MERCURY.INI file.
#  This sample file implements most of the possible switches for each
#  module, but you can edit it to do less if you wish.
#
#  Anything after a '#' to the end of the line is a comment and
#  is stripped out before parsing. Trailing and leading whitespace
#  is also stripped before parsing. Many sample commands have been
#  left in this file commented out for reference purposes.
#
#  Note that in general, manual modification of this file is NOT
#  RECOMMENDED - use the Mercury "Configuration" menu to change the
#  program's settings wherever possible.
#

[General]
myname:          {{DOMINIO_CANONICO}}    # Canonical name for this server
timezone:        +0000    # Time Zone to add to date fields
file_api:        1    # Use the file api instead of queues
mailqueue:       C:\MERCURY\QUEUE    # Where mail should be put for delivery
smtpqueue:       C:\MERCURY\QUEUE    # Where the SMTP client should look for mail
newmail_path:    C:\MERCURY\MAIL\~N    # Where to find the users' WinPMail mailboxes.

[Protocols]
MERCURYS.DLL
MERCURYP.DLL
# MERCURYE.DLL
# MERCURYC.DLL
# MERCURYD.DLL
# MERCURYH.DLL
# MERCURYF.DLL
# MERCURYW.DLL
# MERCURYX.DLL
MERCURYI.DLL
# MERCURYB.DLL

[Mercury]
failfile:      C:\MERCURY\Mercury\FAILURE.MER
confirmfile:   C:\MERCURY\Mercury\CONFIRM.MER
aliasfile:     C:\MERCURY\Mercury\ALIAS.MER
synfile:       C:\MERCURY\Mercury\SYNONYM.MER
listfile:      C:\MERCURY\Mercury\LISTS.MER
logfile:       C:\MERCURY\Logs\Core\~y-~m-~d.log
logwidth:      30
retpath:       1
maxhops:       30
gullible:      0
poll:          10
scratch:       C:\MERCURY\Scratch
returnlines:   15
postmaster:    Admin
broadcast:     1
receipts:      0
PM_notify:     1
change_owner:  1
auto_tzone:    1
LogLevel:      15
LogMax:        100
RetryPeriod:   30
MaxRetries:    16
TwoPasses:     1
Autoaddress:   0
Daily_exit:    0
No_Areply:     0
Alt_Forward:   0
Maint_hour:    2
Maint_min:     0
Retry_Mode:    0
Local_DSNs:    1
DSN_time1:     10800
DSN_time2:     86400
DSN_time3:     259200
Host_in_title: 0
Lingering:     0
Linger_Timeout: 60
Alert_Host:    notify.pmail.com
Alert_Interval: 720
Alert_Flags:   3
Fast_First_Retry: 0
Fast_First_Retry_Secs: 60

[MercuryC]
logfile : C:\MERCURY\Logs\MercuryC\~y-~m-~d.log
Session_logging : C:\MERCURY\Sessions\MercuryC\
host:
scratch:     C:\MERCURY\scratch
poll:        30
returnlines: 15
failfile:    C:\MERCURY\Mercury\FAILURE.MER
esmtp:       1

[MercuryE]
logfile : C:\MERCURY\Logs\MercuryE\~y-~m-~d.log
Session_logging : C:\MERCURY\Sessions\MercuryE\

[MercuryD]
Session_logging : C:\MERCURY\Sessions\MercuryD\
Scratch : C:\MERCURY\Scratch\MercuryD

[MercuryS]
logfile : C:\MERCURY\Logs\MercuryS\~y-~m-~d.log
Session_logging : C:\MERCURY\Sessions\MercuryS\
debug:       1
timeout : 30
Relay : 0

[MercuryP]
logfile : C:\MERCURY\Logs\MercuryP\~y-~m-~d.log
Session_logging : C:\MERCURY\Sessions\MercuryP\
Scratch : C:\MERCURY\Scratch\MercuryP

[MercuryX]

[Domains]
{{NOMBRE_CORTO_DOMINIO}}: {{NOMBRE_CORTO_DOMINIO}}
{{NOMBRE_CORTO_DOMINIO}}: {{DOMINIO_CANONICO}}

[Maiser]
Helpfile:        C:\MERCURY\Mercury\MAISER.HLP
Lookupfile:      C:\MERCURY\Mercury\MAISER.LKP
Send_dir:        C:\MERCURY\Mercury\SENDABLE
Logfile:         C:\MERCURY\Logs\Maiser\~y-~m-~d.LOG
Notify:          C:\MERCURY\Mercury\TMP
NoList:          N
Local_only:      Y

[MercuryH]
logfile : C:\MERCURY\Logs\MercuryH\~y-~m-~d.log

[MercuryI]
Scratch : C:\MERCURY\Scratch\MercuryI
logfile : C:\MERCURY\Logs\MercuryI\~y-~m-~d.log
Session_logging : C:\MERCURY\Sessions\MercuryI\

[MercuryB]
Scratch : C:\MERCURY\Scratch\MercuryB
logfile : C:\MERCURY\Logs\MercuryB\~y-~m-~d.log
Session_logging : C:\MERCURY\Sessions\MercuryB\

[Groups]

[Rewrite]

[Statistics]
StatFlags:    0
STF_Hours:    24
STM_Hours:    24
"@

# Reemplazar variables
$iniFinal = $iniTemplate -replace "{{DOMINIO_CANONICO}}", $dominio
$iniFinal = $iniFinal -replace "{{NOMBRE_CORTO_DOMINIO}}", $nombreCorto

# Guardar archivo INI con codificación UTF8 sin BOM
$iniPath = "C:\MERCURY\MERCURY.INI"
$utf8NoBom = New-Object System.Text.UTF8Encoding($false)
[System.IO.File]::WriteAllText($iniPath, $iniFinal, $utf8NoBom)

Write-Host "Mercury/32 instalado correctamente con dominio $dominio"

# Crear reglas de firewall para IMAP, POP3 y SMTP
Write-Host "Configurando reglas de firewall para puertos 25 (SMTP), 110 (POP3) y 143 (IMAP)..."

New-NetFirewallRule -DisplayName "Mercury SMTP (25)" -Direction Inbound -Protocol TCP -LocalPort 25 -Action Allow -Profile Any
New-NetFirewallRule -DisplayName "Mercury POP3 (110)" -Direction Inbound -Protocol TCP -LocalPort 110 -Action Allow -Profile Any
New-NetFirewallRule -DisplayName "Mercury IMAP (143)" -Direction Inbound -Protocol TCP -LocalPort 143 -Action Allow -Profile Any

Write-Host "Reglas de firewall creadas correctamente"

# Rutas
$mercuryPath = "C:\Mercury"
$mailDir = "$mercuryPath\Mail"
$pMailUsrPath = "$mailDir\PMAIL.USR"
$mercuryExe = "$mercuryPath\Mercury.exe"

# Preguntar cuántos usuarios
do {
    $inputCantidad = Read-Host "¿Cuántos usuarios deseas crear?"
} while (-not ($inputCantidad -as [int]) -or [int]$inputCantidad -lt 1)

$cantidadUsuarios = [int]$inputCantidad

# Detener Mercury si está abierto
Stop-Process -Name "Mercury" -Force -ErrorAction SilentlyContinue
Start-Sleep -Seconds 3

# Crear usuarios
for ($i = 1; $i -le $cantidadUsuarios; $i++) {
    Write-Host "`n[$i de $cantidadUsuarios] Crear nuevo usuario:"

    $newUser = Read-Host "Nombre del buzón (ej. juan)"
    $userDescription = Read-Host "Descripción (nombre completo o alias)"
    $password = Read-Host "Contraseña para $newUser"

    $userDir = "$mailDir\$newUser"

    # 1. Agregar entrada a PMAIL.USR
    Add-Content -Path $pMailUsrPath -Value "U;$newUser;$userDescription"

    # 2. Crear carpeta del usuario si no existe
    if (-not (Test-Path $userDir)) {
        New-Item -Path $userDir -ItemType Directory | Out-Null
    }

    # 3. Crear PASSWD.PM
    $passwdContent = @"
# Mercury/32 User Information File
POP3_access: $password
APOP_secret: $password
"@
    Set-Content -Path "$userDir\PASSWD.PM" -Value $passwdContent -Encoding ASCII

    # 4. Dar permisos NTFS
    icacls $userDir /grant "$env:USERNAME`:(OI)(CI)F" | Out-Null

    Write-Host "Usuario '$newUser' creado correctamente."
}

# 5. Reiniciar Mercury
Start-Process -FilePath $mercuryExe
Write-Host "`nMercury reiniciado. Todos los usuarios fueron creados correctamente."
